{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/components/dashboard/dashboard.component.ts","webpack:///src/app/components/dashboard/dashboard.component.html","webpack:///src/app/components/manage/manage.component.ts","webpack:///src/app/components/manage/manage.component.html","webpack:///src/app/components/summary/summary.component.ts","webpack:///src/app/components/summary/summary.component.html","webpack:///src/app/data-center/alert/alert.component.ts","webpack:///src/app/data-center/alert/alert.component.html","webpack:///src/app/data-center/data-center.module.ts","webpack:///src/app/data-center/data-dashboard/data-dashboard.component.ts","webpack:///src/app/data-center/data-dashboard/data-dashboard.component.html","webpack:///src/app/data-center/metric/metric.component.ts","webpack:///src/app/data-center/metric/metric.component.html","webpack:///src/app/data-center/nodes-detail/nodes-detail.component.ts","webpack:///src/app/data-center/nodes-detail/nodes-detail.component.html","webpack:///src/app/data-center/nodes-row/nodes-row.component.ts","webpack:///src/app/data-center/nodes-row/nodes-row.component.html","webpack:///src/app/data-center/nodes/nodes.component.ts","webpack:///src/app/data-center/nodes/nodes.component.html","webpack:///src/app/invoice/customer-form/customer-form.component.ts","webpack:///src/app/invoice/customer-form/customer-form.component.html","webpack:///src/app/invoice/customer/customer.component.ts","webpack:///src/app/invoice/customer/customer.component.html","webpack:///src/app/invoice/customers/customers.component.ts","webpack:///src/app/invoice/customers/customers.component.html","webpack:///src/app/invoice/hours-control/hours-control.component.ts","webpack:///src/app/invoice/hours-control/hours-control.component.html","webpack:///src/app/invoice/invoice-form/invoice-form.component.ts","webpack:///src/app/invoice/invoice-form/invoice-form.component.html","webpack:///src/app/invoice/invoice.module.ts","webpack:///src/app/invoice/invoice/invoice.component.ts","webpack:///src/app/invoice/invoice/invoice.component.html","webpack:///src/app/invoice/invoices/invoices.component.ts","webpack:///src/app/invoice/invoices/invoices.component.html","webpack:///src/app/invoice/model/customer.model.ts","webpack:///src/app/invoice/model/invoice.model.ts","webpack:///src/app/invoice/service/customers/customers.service.ts","webpack:///src/app/invoice/service/invoices/invoices.service.ts","webpack:///src/app/invoice/service/rest/rest.service.ts","webpack:///src/app/invoice/validators/hours.validator.ts","webpack:///src/app/services/stocks.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","component","pathMatch","redirectTo","AppRoutingModule","forRoot","imports","AppComponent","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","DashboardComponent","service","symbols","get","readStockData","load","subscribe","stocks","ManageComponent","add","stock","toUpperCase","symbol","remove","SummaryComponent","change","AlertComponent","DataCenterModule","entryComponents","schemas","DataDashboardComponent","ComponentFactoryResolver","date","alertRef","alertComponent","resolveComponentFactory","alertBox","createComponent","instance","changeDetectorRef","detectChanges","setTimeout","destroyAlert","destroy","clearInterval","interval","generateData","setInterval","refresh","alert","Date","cluster1","cluster2","cpu","used","available","mem","i","push","randomNode","node","name","randomInteger","min","max","Math","floor","random","read","MetricComponent","value","changes","isNaN","currentValue","changeDetection","OnPush","NodesDetailComponent","activeModal","prop","isDanger","NodesRowComponent","modalService","modal","open","componentInstance","NodesComponent","CustomerFormComponent","loadingService","router","dialogService","customersService","route","register","params","pipe","customerId","customer","update","response","viewCustomer","create","openConfirm","message","title","acceptButton","afterClosed","accept","cancel","navigate","navigateByUrl","CustomerComponent","CustomersComponent","query","sort","order","customers","HoursControlComponent","hours","validateFn","onChange","v","$event","key","setValue","control","undefined","fn","provide","useExisting","multi","keypress","InvoiceFormComponent","invoicesServie","formBuilder","total","invoiceForm","group","required","rate","paid","invoiceId","invoice","valueChanges","viewInvoice","InvoiceModule","InvoiceComponent","invoicesService","InvoicesComponent","invoices","Customer","Invoice","CustomersService","resource","providedIn","InvoicesService","RestService","http","base","url","toQueryString","body","post","put","paramsObject","Object","map","encodeURIComponent","join","HoursValidator","Number","isInteger","hour","StocksService","slice","splice","indexOf","environment","production","bootstrapModule","err","console","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { DashboardComponent } from './components/dashboard/dashboard.component';\nimport { ManageComponent } from './components/manage/manage.component';\nimport { DataDashboardComponent } from './data-center/data-dashboard/data-dashboard.component';\nimport { CustomersComponent } from './invoice/customers/customers.component';\nimport { CustomerComponent } from './invoice/customer/customer.component';\nimport { CustomerFormComponent } from './invoice/customer-form/customer-form.component';\nimport { InvoicesComponent } from './invoice/invoices/invoices.component';\nimport { InvoiceFormComponent } from './invoice/invoice-form/invoice-form.component';\nimport { InvoiceComponent } from './invoice/invoice/invoice.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: DashboardComponent,\n  },\n  {\n    path: 'manage',\n    component: ManageComponent,\n  },\n  {\n    path: 'datacenter',\n    component: DataDashboardComponent,\n  },\n  {\n    path: 'customers',\n    component: CustomersComponent,\n  },\n  { path: 'invoices', component: InvoicesComponent },\n  { path: 'invoices/create', component: InvoiceFormComponent },\n  { path: 'invoices/:invoiceId', component: InvoiceComponent },\n  { path: 'invoices/:invoiceId/edit', component: InvoiceFormComponent },\n  { path: 'customers', component: CustomersComponent },\n  { path: 'customers/create', component: CustomerFormComponent },\n  { path: 'customers/:customerId', component: CustomerComponent },\n  { path: 'customers/:customerId/edit', component: CustomerFormComponent },\n  { path: '', pathMatch: 'full', redirectTo: '/invoices' }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n})\nexport class AppComponent {}\n","<div>\n  <mat-toolbar color=\"primary\">\n    <div fxShow=\"true\" fxHide.gt-sm=\"true\">\n      <button mat-icon-button (click)=\"sidenav.toggle()\">\n        <mat-icon>menu</mat-icon>\n      </button>\n    </div>\n\n    <a mat-button class=\"companyName\" routerLink=\"/\">\n      <span>StockTrack</span>\n    </a>\n    <span class=\"example-spacer\"></span>\n    <div fxShow=\"true\" fxHide.lt-md=\"true\">\n      <a mat-button routerLink=\"/\">Dashboard</a>\n      <a mat-button routerLink=\"/customers\">Customers</a>\n      <a mat-button routerLink=\"/invoices\">Invoices</a>\n      <a mat-button routerLink=\"/manage\">Manage</a>\n      <a mat-button routerLink=\"/datacenter\">DataCenter</a>\n    </div>\n\n  </mat-toolbar>\n  <mat-sidenav-container fxFlexFill class=\"example-container\">\n    <mat-sidenav color=\"primary\" #sidenav fxLayout=\"column\" mode=\"over\" opened=\"false\" fxHide.gt-sm=\"true\">\n      <div fxLayout=\"column\">\n        <a mat-button routerLink=\"/\">Dashboard</a>\n        <a mat-button routerLink=\"/customers\">Customers</a>\n        <a mat-button routerLink=\"/invoices\">Invoices</a>\n        <a mat-button routerLink=\"/manage\">Manage</a>\n        <a mat-button routerLink=\"/datacenter\">DataCenter</a>\n      </div>\n    </mat-sidenav>\n    <mat-sidenav-content fxFlexFill>\n      <router-outlet></router-outlet>\n    </mat-sidenav-content>\n  </mat-sidenav-container>\n</div>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule } from '@angular/forms';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { StocksService } from './services/stocks.service';\nimport { CustomersService } from './invoice/service/customers/customers.service';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { SummaryComponent } from './components/summary/summary.component';\nimport { DashboardComponent } from './components/dashboard/dashboard.component';\nimport { ManageComponent } from './components/manage/manage.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { InvoiceModule } from './invoice/invoice.module';\nimport { DataCenterModule } from './data-center/data-center.module';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatListModule } from '@angular/material/list';\nimport { RouterModule } from '@angular/router';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatFormFieldModule } from \"@angular/material/form-field\";\nimport { MatInputModule } from '@angular/material/input';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    SummaryComponent,\n    DashboardComponent,\n    ManageComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    FormsModule,\n    BrowserAnimationsModule,\n    FlexLayoutModule,\n    MatSidenavModule,\n    MatToolbarModule,\n    MatButtonModule,\n    MatIconModule,\n    MatListModule,\n    RouterModule,\n    InvoiceModule,\n    DataCenterModule,\n    MatGridListModule,\n    MatCardModule,\n    MatFormFieldModule,\n    MatInputModule\n  ],\n  providers: [StocksService, CustomersService],\n  bootstrap: [AppComponent],\n\n})\nexport class AppModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { StocksService, StockInterface } from '../../services/stocks.service';\n\n@Component({\n  selector: 'dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css'],\n})\nexport class DashboardComponent implements OnInit {\n  stocks: Array<StockInterface>;\n  symbols: Array<string>;\n\n  constructor(private service: StocksService) {\n    this.symbols = service.get();\n  }\n\n  ngOnInit() {\n    this.readStockData();\n  }\n\n  readStockData() {\n    this.service\n      .load(this.symbols)\n      .subscribe((stocks) => (this.stocks = stocks));\n  }\n}\n","<div class=\"container mt-2\">\n  <div\n      class=\"\"\n      *ngIf=\"!stocks\"\n      style=\"text-align: center;\"\n    >\n      Loading\n    </div>\n  <mat-grid-list cols=\"2\" rowHeight=\"2:1\">\n    <mat-grid-tile *ngFor=\"let stock of stocks\">\n      <summary [stock]=\"stock\"></summary>\n    </mat-grid-tile>\n  </mat-grid-list>\n</div>\n","import { Component } from \"@angular/core\";\nimport { StocksService } from \"src/app/services/stocks.service\";\n\n@Component({\n  selector: \"manage\",\n  templateUrl: \"./manage.component.html\",\n  styleUrls: [\"./manage.component.css\"],\n})\nexport class ManageComponent {\n  symbols: Array<string>;\n  stock: string;\n\n  constructor(private service: StocksService) {\n    this.symbols = service.get();\n  }\n\n  add() {\n    this.symbols = this.service.add(this.stock.toUpperCase());\n    this.stock = \"\";\n  }\n\n  remove(symbol) {\n    this.symbols = this.service.remove(symbol);\n  }\n}\n","<div class=\"container\" class=\"manage-form\">\n    <form (submit)=\"add()\">\n      <mat-form-field>\n        <input\n          name=\"stock\"\n          [(ngModel)]=\"stock\"\n          matInput\n          type=\"text\"\n          placeholder=\"Add Stock\"\n        />\n      </mat-form-field>\n    </form>\n    <table\n      class=\"manage-form\"\n    >\n      <tbody>\n        <tr *ngFor=\"let symbol of symbols\">\n          <td class=\"manage-td\">{{ symbol }}</td>\n          <td>\n            <button mat-button color=\"warn\" (click)=\"remove(symbol)\">\n              Remove\n            </button>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n</div>\n","import { Component, Input } from \"@angular/core\";\n\n@Component({\n  selector: \"summary\",\n  templateUrl: \"./summary.component.html\",\n  styleUrls: [\"./summary.component.css\"],\n})\nexport class SummaryComponent {\n  @Input() stock: any;\n\n  isNegative() {\n    return this.stock && this.stock.change < 0;\n  }\n\n  isPositive() {\n    return this.stock && this.stock.change > 0;\n  }\n}\n","<mat-card class=\"stock-card\" [ngClass]=\"{ increase: isPositive(), decrease: isNegative() }\">\n  <span>\n    <mat-card-content>\n        <h4 style=\"color: #fff; margin: 0;\">\n            {{ stock?.symbol?.toUpperCase() }}<br />\n            {{ stock?.lastTradePriceOnly | currency: 'USD':'symbol':'.2' }}<br />\n            {{ stock?.change | currency: 'USD':'symbol':'.2' }} ({{\n              stock?.changeInPercent | percent: '.2'\n            }})\n        </h4>\n    </mat-card-content>\n  </span>\n</mat-card>","import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-alert',\n  templateUrl: './alert.component.html',\n  styleUrls: ['./alert.component.css'],\n})\nexport class AlertComponent {\n  @Input() date: Date;\n}\n","<div class=\"container mt-2\">\n  <div class=\"alert alert-warning\" role=\"alert\">\n    The data was refreshed at {{ date | date: 'medium' }}\n  </div>\n</div>\n","import { NgModule, NO_ERRORS_SCHEMA } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { AlertComponent } from './alert/alert.component';\nimport { MetricComponent } from './metric/metric.component';\nimport { NodesComponent } from './nodes/nodes.component';\nimport { NodesDetailComponent } from './nodes-detail/nodes-detail.component';\nimport { NodesRowComponent } from './nodes-row/nodes-row.component';\nimport { DataDashboardComponent } from './data-dashboard/data-dashboard.component';\n\n@NgModule({\n  entryComponents: [NodesDetailComponent, AlertComponent],\n  declarations: [AlertComponent, MetricComponent, NodesComponent, NodesDetailComponent, NodesRowComponent, DataDashboardComponent],\n  imports: [\n    CommonModule,\n    NgbModule\n  ],\n  schemas: [NO_ERRORS_SCHEMA]\n})\nexport class DataCenterModule { }\n","import {\n  Component,\n  OnInit,\n  OnDestroy,\n  Output,\n  EventEmitter,\n  ComponentFactoryResolver,\n  ComponentRef,\n  ViewContainerRef,\n  ViewChild,\n} from '@angular/core';\nimport { AlertComponent } from '../alert/alert.component';\n\ninterface Metric {\n  used: number;\n  available: number;\n}\n\ninterface Node {\n  name: string;\n  cpu: Metric;\n  mem: Metric;\n}\n\n@Component({\n  selector: 'app-datadashboard',\n  templateUrl: './data-dashboard.component.html',\n  styleUrls: ['./data-dashboard.component.css'],\n})\nexport class DataDashboardComponent implements OnInit, OnDestroy {\n  cpu: Metric;\n  mem: Metric;\n  cluster1: Node[];\n  cluster2: Node[];\n  interval: any;\n\n  alertRef: ComponentRef<AlertComponent>;\n  @ViewChild('alertBox', { read: ViewContainerRef }) alertBox: ViewContainerRef;\n  constructor(private ComponentFactoryResolver: ComponentFactoryResolver) {}\n\n  alert(date) {\n    if (!this.alertRef) {\n      const alertComponent = this.ComponentFactoryResolver.resolveComponentFactory(\n        AlertComponent\n      );\n      this.alertRef = this.alertBox.createComponent(alertComponent);\n    }\n\n    this.alertRef.instance.date = date;\n    this.alertRef.changeDetectorRef.detectChanges();\n\n    setTimeout(() => this.destroyAlert(), 5000);\n  }\n\n  destroyAlert() {\n    if (this.alertRef) {\n      this.alertRef.destroy();\n      delete this.alertRef;\n    }\n  }\n\n  ngOnDestroy(): void {\n    clearInterval(this.interval);\n  }\n\n  ngOnInit(): void {\n    this.generateData();\n\n    this.interval = setInterval(() => {\n      this.refresh();\n    }, 15000);\n  }\n\n  refresh(): void {\n    this.generateData();\n    this.alert(new Date());\n  }\n\n  generateData(): void {\n    this.cluster1 = [];\n    this.cluster2 = [];\n    this.cpu = { used: 0, available: 0 };\n    this.mem = { used: 0, available: 0 };\n    for (let i = 1; i < 4; i++) this.cluster1.push(this.randomNode(i));\n    for (let i = 4; i < 7; i++) this.cluster2.push(this.randomNode(i));\n  }\n\n  private randomNode(i): Node {\n    let node = {\n      name: 'node' + i,\n      cpu: { available: 16, used: this.randomInteger(0, 16) },\n      mem: { available: 48, used: this.randomInteger(0, 48) },\n    };\n    this.cpu.used += node.cpu.used;\n    this.cpu.available += node.cpu.available;\n    this.mem.used += node.mem.used;\n    this.mem.available += node.mem.available;\n    return node;\n  }\n\n  private randomInteger(min: number = 0, max: number = 100): number {\n    return Math.floor(Math.random() * max) + 1;\n  }\n}\n","<div class=\"container mt-2\">\n  <button class=\"btn btn-info\" type=\"button\" (click)=\"refresh()\">\n    Reload\n  </button>\n</div>\n\n<div class=\"container mt-2\">\n  <ng-template #alertBox></ng-template>\n</div>\n\n<div class=\"container mt-2\">\n  <div class=\"row\">\n    <app-metric class=\"col-sm-6\" [used]=\"cpu.used\" [available]=\"cpu.available\">\n      <metric-title>CPU</metric-title>\n      <metric-description>utilization of CPU cores</metric-description>\n    </app-metric>\n    <app-metric class=\"col-sm-6\" [used]=\"mem.used\" [available]=\"mem.available\">\n      <metric-title>Memory</metric-title>\n      <metric-description>utilization of memory in GB</metric-description>\n    </app-metric>\n  </div>\n</div>\n\n<div class=\"container mt-2\">\n  <div class=\"card card-block\">\n    <div class=\"card-body\">\n      <nav class=\"navbar navbar-dark bg-inverse mb-1\">\n        <h1 class=\"navbar-brand mb-0\">Cluster 1</h1>\n      </nav>\n      <table app-nodes class=\"table table-hover\">\n        <tr app-nodes-row *ngFor=\"let node of cluster1\" [node]=\"node\"></tr>\n      </table>\n      <nav class=\"navbar navbar-dark bg-inverse mb-1\">\n        <h1 class=\"navbar-brand mb-0\">Cluster 2</h1>\n      </nav>\n      <table app-nodes class=\"table table-hover\">\n        <tr app-nodes-row *ngFor=\"let node of cluster2\" [node]=\"node\"></tr>\n      </table>\n    </div>\n  </div>\n</div>\n\n<template ngbModalContainer></template>\n","import { Component, Input, ChangeDetectionStrategy, OnChanges} from '@angular/core';\n\n@Component({\n  selector: 'app-metric',\n  templateUrl: './metric.component.html',\n  styleUrls: ['./metric.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MetricComponent implements OnChanges {\n\n  @Input('used') value: number = 0;\n  @Input('available') max: number = 100;\n\n  ngOnChanges(changes) {\n    if (changes.value&& isNaN(changes.value.currentValue)) this.value = 0\n    if (changes.max && isNaN(changes.max.currentValue)) this.max - 0\n  }\n\n  isDanger() {\n    return this.value / this.max > 0.7;\n  }\n}\n","<div class=\"card card-block\">\n  <div class=\"card-body\">\n    <nav\n      class=\"navbar navbar-dark bg-primary mb-1\"\n      [ngClass]=\"{ 'bg-danger': isDanger(), 'bg-success': !isDanger() }\"\n    >\n      <h1 class=\"navbar-brand mb-0\">\n        <ng-content select=\"metric-title\"></ng-content>\n      </h1>\n    </nav>\n\n    <h4 class=\"card-title\">\n      {{ value }}/{{ max }} ({{ value / max | percent: '1.0-2' }})\n    </h4>\n    <p class=\"card-text\">\n      <ng-content select=\"metric-description\"></ng-content>\n    </p>\n    <ngb-progressbar\n      [value]=\"value\"\n      [max]=\"max\"\n      [type]=\"isDanger() ? 'danger' : 'success'\"\n    ></ngb-progressbar>\n  </div>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\n@Component({\n  selector: 'app-nodes-detail',\n  templateUrl: './nodes-detail.component.html',\n  styleUrls: ['./nodes-detail.component.css'],\n})\nexport class NodesDetailComponent {\n  @Input() node;\n\n  constructor(public activeModal: NgbActiveModal) {}\n\n  isDanger(prop) {\n    return this.node[prop].used / this.node[prop].available > 0.7;\n  }\n\n  getType(prop) {\n    return this.isDanger(prop) ? 'danger' : 'success';\n  }\n}\n","<div class=\"modal-header\">\n  <h4 class=\"modal-title\">{{ node.name }}</h4>\n  <button\n    type=\"button\"\n    class=\"close\"\n    aria-label=\"Close\"\n    (click)=\"activeModal.dismiss()\"\n  >\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n</div>\n<div class=\"modal-body container\">\n  <div class=\"col-xs-6\">\n    <app-metric [used]=\"node.cpu.used\" [available]=\"node.cpu.available\">\n      <metric-title>CPU</metric-title>\n    </app-metric>\n  </div>\n  <div class=\"col-xs-6\">\n    <app-metric [used]=\"node.mem.used\" [available]=\"node.mem.available\">\n      <metric-title>Memory</metric-title>\n    </app-metric>\n  </div>\n</div>\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { NodesDetailComponent } from '../nodes-detail/nodes-detail.component';\n\n@Component({\n  selector: '[app-nodes-row]',\n  templateUrl: './nodes-row.component.html',\n  styleUrls: ['./nodes-row.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NodesRowComponent {\n  @Input() node: any;\n\n  isDanger(prop) {\n    return this.node[prop].used / this.node[prop].available / 0.7;\n  }\n\n  constructor(private modalService: NgbModal) {}\n\n  open(node) {\n    const modal = this.modalService.open(NodesDetailComponent);\n    modal.componentInstance.node = node;\n  }\n}\n","<th scope=\"row\">{{ node.name }}</th>\n<td [class.table-danger]=\"isDanger('cpu')\">\n  {{ node.cpu.used }}/{{ node.cpu.available }}\n</td>\n<td [class.table-danger]=\"isDanger('cpu')\">\n  ({{ node.cpu.used / node.cpu.available | percent }})\n</td>\n<td [class.table-danger]=\"isDanger('mem')\">\n  {{ node.mem.used }}/{{ node.mem.available }}\n</td>\n<td [class.table-danger]=\"isDanger('mem')\">\n  ({{ node.mem.used / node.mem.available | percent }})\n</td>\n<td><button class=\"btn btn-secondary\" (click)=\"open(node)\">View</button></td>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: '[app-nodes]',\n  templateUrl: './nodes.component.html',\n  styleUrls: ['./nodes.component.css'],\n})\nexport class NodesComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n","<thead>\n  <tr>\n    <th>Node</th>\n    <th [colSpan]=\"2\">CPU</th>\n    <th [colSpan]=\"2\">Memory</th>\n    <th>Details</th>\n  </tr>\n</thead>\n<ng-content></ng-content>\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params, Router } from '@angular/router';\nimport { TdLoadingService } from '@covalent/core/loading';\nimport { TdDialogService } from '@covalent/core/dialogs';\nimport { Customer } from '../model/customer.model';\nimport { CustomersService } from '../service/customers/customers.service';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-customer-form',\n  templateUrl: './customer-form.component.html',\n  styleUrls: ['./customer-form.component.css']\n})\nexport class CustomerFormComponent implements OnInit {\n  customer: Customer;\n  constructor(\n    private loadingService: TdLoadingService,\n    private router: Router,\n    private dialogService: TdDialogService,\n    private customersService: CustomersService,\n    private route: ActivatedRoute\n  ) { }\n\n  ngOnInit() {\n    this.loadingService.register('customer');\n    this.route.params.pipe(\n      map((params: Params) => params.customerId)\n      ).subscribe( customerId => {\n        if (customerId) {\n          this.customersService\n            .get<Customer>(customerId)\n            .subscribe(customer => {\n              this.customer = customer;\n              this.loadingService.resolve('customer');\n            });\n        } else {\n          this.customer = new Customer();\n          this.loadingService.resolve('customer');\n        }\n      });\n  }\n\n  save() {\n    if (this.customer.id) {\n      this.customersService\n        .update<Customer>(this.customer.id, this.customer)\n        .subscribe(response => {\n          this.viewCustomer(response.id);\n        });\n    } else {\n      this.customersService\n        .create<Customer>(this.customer)\n        .subscribe(response => {\n          this.viewCustomer(response.id);\n        });\n    }\n  }\n\n  delete() {\n    this.dialogService\n      .openConfirm({\n        message: 'Are you sure you want to delete this customer?',\n        title: 'Confirm',\n        acceptButton: 'Delete'\n      })\n      .afterClosed()\n      .subscribe((accept: boolean) => {\n        if (accept) {\n          this.loadingService.register('customer');\n          this.customersService.delete(this.customer.id).subscribe(response => {\n            this.loadingService.resolve('customer');\n            this.customer.id = null;\n            this.cancel();\n          });\n        }\n      });\n  }\n\n  cancel() {\n    if (this.customer.id) {\n      this.router.navigate(['/customers', this.customer.id]);\n    } else {\n      this.router.navigateByUrl('/customers');\n    }\n  }\n\n  private viewCustomer(id: number) {\n    this.router.navigate(['/customers', id]);\n  }\n}\n","<div *tdLoading=\"'customer'\">\n    <form *ngIf=\"customer\" #form=\"ngForm\" (ngSubmit)=\"save()\">\n      <mat-card>\n        <mat-card-header>Edit Customer</mat-card-header>\n        <mat-card-content>\n          <mat-form-field>\n            <input\n              name=\"customer\"\n              matInput\n              placeholder=\"Customer Name\"\n              [(ngModel)]=\"customer.name\"\n              required\n              #name=\"ngModel\"\n            />\n            <mat-error *ngIf=\"name.touched && name.invalid\">\n              Name is required\n            </mat-error>\n          </mat-form-field>\n          <mat-form-field>\n            <input\n              name=\"email\"\n              matInput\n              type=\"email\"\n              placeholder=\"Email\"\n              [(ngModel)]=\"customer.email\"\n              required\n              #email=\"ngModel\"\n            />\n            <mat-error *ngIf=\"email.touched && email.invalid\">\n              A valid email is required.\n            </mat-error>\n          </mat-form-field>\n          <mat-form-field>\n            <input\n              name=\"phone\"\n              matInput\n              type=\"tel\"\n              placeholder=\"Phone\"\n              [(ngModel)]=\"customer.phone\"\n              required\n              phone\n              #phone=\"ngModel\"\n            />\n\n            <mat-error *ngIf=\"phone.touched && phone.errors?.phone\">\n              Not a valid phone number\n            </mat-error>\n          </mat-form-field>\n          {{ customer | json }}\n        </mat-card-content>\n        <mat-card-actions>\n          <button type=\"button\" mat-button (click)=\"delete()\" *ngIf=\"customer.id\">\n            Delete\n          </button>\n          <button type=\"button\" mat-button (click)=\"cancel()\">Cancel</button>\n          <button\n            type=\"submit\"\n            mat-raised-button\n            color=\"primary\"\n            [disabled]=\"form.invalid\"\n          >\n            Save\n          </button>\n        </mat-card-actions>\n      </mat-card>\n    </form>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params} from '@angular/router';\nimport { Customer } from 'src/app/invoice/model/customer.model';\nimport { CustomersService } from 'src/app/invoice/service/customers/customers.service';\nimport { map, switchMap } from 'rxjs/operators';\nimport { TdLoadingService } from '@covalent/core/loading';\n\n@Component({\n  selector: 'app-customer',\n  templateUrl: './customer.component.html',\n  styleUrls: ['./customer.component.css']\n})\nexport class CustomerComponent implements OnInit {\n  customer: Customer;\n  constructor(\n    private customersService: CustomersService,\n    private route: ActivatedRoute,\n    private loadingService: TdLoadingService) { }\n\n  ngOnInit(): void {\n    //this.loadingService.register('customer');\n    this.route.params.pipe(\n      map((params: Params) => params.customerId),\n      switchMap((customerId: number) => this.customersService.get<Customer>(customerId)))\n      .subscribe(\n        customer => {this.customer = customer;\n        //this.loadingService.resolve('customer');\n      });\n  }\n}\n","<div *tdLoading=\"'customer'\">\n  <mat-list *ngIf=\"customer\">\n    <h3 matSubheader>Customer ID: {{customer.id}}</h3>\n    <mat-list-item>\n      <mat-icon mat-list-icon>perm_identity</mat-icon>\n      <h4 mat-line>{{customer.name}}</h4>\n      <p mat-line>Customer</p>\n    </mat-list-item>\n    <mat-list-item>\n      <mat-icon mat-list-icon>email</mat-icon>\n      <h4 mat-line>{{customer.email}}</h4>\n      <p mat-line>Email</p>\n    </mat-list-item>\n    <mat-list-item>\n      <mat-icon mat-list-icon>phone</mat-icon>\n      <h4 mat-line>{{customer.phone}}</h4>\n      <p mat-line>Phone</p>\n    </mat-list-item>\n  </mat-list>\n  <button mat-fab routerLink=\"/customers/{{customer?.id}}/edit\">\n    <mat-icon>mode_edit</mat-icon>\n  </button>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { Customer } from '../model/customer.model';\nimport { CustomersService } from '../service/customers/customers.service';\n\n@Component({\n  selector: 'app-customers',\n  templateUrl: './customers.component.html',\n  styleUrls: ['./customers.component.css']\n})\nexport class CustomersComponent implements OnInit {\n  customers: Customer[];\n  constructor(private customersService: CustomersService) { }\n\n  ngOnInit(): void {\n    this.customersService.query<Array<Customer>>({ sort: 'created', order: 'desc' })\n      .subscribe(customers => {\n        this.customers = customers;\n      })\n  }\n}\n","<div>\n    <mat-list *ngIf=\"customers\">\n        <h3 matSubheader>Customers</h3>\n        <mat-list-item *ngFor=\"let customer of customers\" routerLink=\"/customers/{{customer.id}}\">\n            <mat-icon mat-list-icon>note</mat-icon>\n            <h4 mat-line>{{customer.name}}</h4>\n            <p mat-line> {{customer.email}} </p>\n        </mat-list-item>\n    </mat-list>\n    <button mat-fab class=\"mat-fab-bottom-right fixed\" routerLink=\"/customers/create\">\n        <mat-icon>add</mat-icon>\n    </button>\n</div>","import { Component, forwardRef, OnInit } from '@angular/core';\nimport {\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  FormControl\n} from '@angular/forms';\n\nimport { HoursValidator } from '../validators/hours.validator';\n\n@Component({\n  selector: 'app-hours-control',\n  templateUrl: './hours-control.component.html',\n  styleUrls: ['./hours-control.component.css'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => HoursControlComponent),\n      multi: true\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => HoursControlComponent),\n      multi: true\n    }\n  ]\n})\nexport class HoursControlComponent implements ControlValueAccessor {\n\n  hours = 0;\n  validateFn = HoursValidator;\n  onChange = (v: any) => {};\n\n  update() {\n    this.onChange(this.hours);\n  }\n\n  keypress($event) {\n    if ($event.key === 'ArrowUp') {\n      this.setValue(0.25);\n    } else if ($event.key === 'ArrowDown') {\n      this.setValue(-0.25);\n    }\n  }\n\n  setValue(change: number) {\n    this.hours += change;\n    this.update();\n  }\n\n  validate(control: FormControl) {\n    return this.validateFn(control);\n  }\n\n  writeValue(value: any) {\n    if (value !== undefined) {\n      this.hours = value;\n    }\n  }\n\n  registerOnChange(fn) {\n    this.onChange = fn;\n  }\n\n  registerOnTouched() {}\n\n}\n","<mat-form-field>\n  <input\n    name=\"hours\"\n    matInput\n    type=\"number\"\n    placeholder=\"Hours\"\n    [(ngModel)]=\"hours\"\n    hours\n    (keyup)=\"keypress($event)\"\n    #control=\"ngModel\"\n    (change)=\"update()\"\n  />\n  <mat-error *ngIf=\"control.touched && control.invalid\">\n    Hours must be a number in increments of .25\n  </mat-error>\n</mat-form-field>\n<div layout=\"row\">\n  <button type=\"button\" mat-button flex (click)=\"setValue(1)\">+ 1</button>\n  <button type=\"button\" mat-button flex (click)=\"setValue(0.25)\">+ .25</button>\n  <button type=\"button\" mat-button flex (click)=\"setValue(-0.25)\">- .25</button>\n  <button type=\"button\" mat-button flex (click)=\"setValue(-1)\">- 1</button>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params, Router } from '@angular/router';\nimport { TdLoadingService } from '@covalent/core/loading';\nimport { TdDialogService } from '@covalent/core/dialogs';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { map } from 'rxjs/operators';\nimport { Invoice } from '../model/invoice.model';\nimport { Customer } from '../model/customer.model';\nimport { InvoicesService } from '../service/invoices/invoices.service';\nimport { CustomersService } from '../service/customers/customers.service';\nimport { HoursValidator } from '../validators/hours.validator';\nimport { Observable, combineLatest } from 'rxjs';\n\n@Component({\n  selector: 'app-invoice-form',\n  templateUrl: './invoice-form.component.html',\n  styleUrls: ['./invoice-form.component.css']\n})\nexport class InvoiceFormComponent implements OnInit {\n  invoiceForm: FormGroup;\n  invoice: Invoice;\n  customer: Customer;\n  customers: Customer[];\n  total = 0;\n\n  constructor(\n    private loadingService: TdLoadingService,\n    private invoicesServie: InvoicesService,\n    private router: Router,\n    private dialogService: TdDialogService,\n    private customersService: CustomersService,\n    private formBuilder: FormBuilder,\n    private route: ActivatedRoute\n  ) {\n    this.invoiceForm = this.formBuilder.group({\n      id: [''],\n      service: ['', Validators.required],\n      customerId: ['', Validators.required],\n      rate: ['', Validators.required],\n      hours: ['', [Validators.required, HoursValidator]],\n      date: ['', Validators.required],\n      paid: ['']\n    });\n   }\n\n  ngOnInit(): void {\n    this.loadingService.register('invoice');\n    this.loadingService.register('customers');\n\n    this.customersService.query<Array<Customer>>().subscribe(customers => {\n      this.customers = customers;\n      this.loadingService.resolve('customers');\n    });\n\n    this.route.params.pipe(\n      map((params: Params) => params.invoiceId)\n    ).subscribe(invoiceId => {\n      if (invoiceId) {\n        this.invoicesServie.get<Invoice>(invoiceId).subscribe(invoice => {\n          this.invoiceForm.setValue(invoice);\n          this.invoice = invoice;\n          this.loadingService.resolve('invoice');\n        });\n      } else {\n        this.invoice = new Invoice();\n        this.loadingService.resolve('invoice');\n      }\n    });\n\n    combineLatest(\n      this.invoiceForm.get('rate').valueChanges,\n      this.invoiceForm.get('hours').valueChanges\n    ).subscribe(([rate = 0, hours = 0]) => {\n      this.total = rate * hours;\n    });\n  }\n\n  save() {\n    if (this.invoice.id) {\n      this.invoicesServie\n        .update<Invoice>(this.invoice.id, this.invoiceForm.value)\n        .subscribe(response => {\n          this.viewInvoice(response.id);\n        });\n    } else {\n      this.invoicesServie\n        .create<Invoice>(this.invoiceForm.value)\n        .subscribe(response => {\n          this.viewInvoice(response.id);\n        });\n    }\n  }\n\n  delete() {\n    this.dialogService\n      .openConfirm({\n        message: 'Are you sure you want to delete this invoice?',\n        title: 'Confirm',\n        acceptButton: 'Delete'\n      })\n      .afterClosed()\n      .subscribe((accept: boolean) => {\n        if (accept) {\n          this.loadingService.register('invoice');\n          this.invoicesServie.delete(this.invoice.id).subscribe(response => {\n            this.loadingService.resolve('invoice');\n            this.invoice.id = null;\n            this.cancel();\n          });\n        }\n      });\n  }\n\n  cancel() {\n    if (this.invoice.id) {\n      this.router.navigate(['/invoices', this.invoice.id]);\n    } else {\n      this.router.navigateByUrl('/invoices')\n    }\n  }\n\n  private viewInvoice(id: number) {\n    this.router.navigate(['/invoices', id]);\n  }\n}\n","<div *tdLoading=\"'invoice'\">\n  <form *ngIf=\"invoice\" [formGroup]=\"invoiceForm\" (ngSubmit)=\"save()\">\n    <mat-card>\n      <mat-card-header>Edit Invoice</mat-card-header>\n      <mat-card-content>\n        <mat-form-field>\n          <input\n            name=\"service\"\n            matInput\n            type=\"text\"\n            placeholder=\"Service\"\n            formControlName=\"service\"\n          />\n          <mat-error\n            *ngIf=\"\n              invoiceForm.get('service').touched &&\n              invoiceForm.get('service').invalid\n            \"\n          >\n            Service is required\n          </mat-error>\n        </mat-form-field>\n        <mat-form-field>\n          <input\n            matInput\n            [matDatepicker]=\"picker\"\n            placeholder=\"Choose a date\"\n            formControlName=\"date\"\n          />\n          <!-- <button type=\"button\" matSuffix [matDatepickerToggle]=\"picker\"></button> -->\n          <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n          <mat-error\n            *ngIf=\"\n              invoiceForm.get('date').touched && invoiceForm.get('date').invalid\n            \"\n          >\n            Date is required\n          </mat-error>\n        </mat-form-field>\n        <mat-datepicker #picker></mat-datepicker>\n        <app-hours-control formControlName=\"hours\"></app-hours-control>\n        <mat-form-field>\n          <input\n            name=\"rate\"\n            matInput\n            type=\"number\"\n            placeholder=\"Rate\"\n            formControlName=\"rate\"\n          />\n          <mat-error\n            *ngIf=\"\n              invoiceForm.get('rate').touched && invoiceForm.get('rate').invalid\n            \"\n          >\n            Hourly rate is required\n          </mat-error>\n        </mat-form-field>\n        <div>\n          <mat-select\n            name=\"customerId\"\n            placeholder=\"Customer\"\n            formControlName=\"customerId\"\n          >\n            <mat-option\n              [value]=\"customer.id\"\n              *ngFor=\"let customer of customers\"\n              >{{ customer?.name }}</mat-option\n            >\n          </mat-select>\n        </div>\n        <div class=\"toggler\">\n          <mat-slide-toggle formControlName=\"paid\">Paid</mat-slide-toggle>\n        </div>\n        <div class=\"total\">Total: {{ total | currency: 'USD':true:'.2' }}</div>\n      </mat-card-content>\n      <mat-card-actions>\n        <button type=\"button\" mat-button (click)=\"delete()\" *ngIf=\"invoice.id\">\n          Delete\n        </button>\n        <button type=\"button\" mat-button (click)=\"cancel()\">Cancel</button>\n        <button\n          type=\"submit\"\n          mat-raised-button\n          color=\"primary\"\n          [disabled]=\"invoiceForm.invalid\"\n        >\n          Save\n        </button>\n      </mat-card-actions>\n    </mat-card>\n  </form>\n</div>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CustomerComponent } from './customer/customer.component';\nimport { CustomersComponent } from './customers/customers.component';\nimport { MatListModule } from '@angular/material/list';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatCardModule } from '@angular/material/card';\nimport { RouterModule } from '@angular/router';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { CovalentLoadingModule } from '@covalent/core/loading';\nimport { CustomerFormComponent } from './customer-form/customer-form.component';\nimport { CovalentDialogsModule } from '@covalent/core/dialogs';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { InvoiceComponent } from './invoice/invoice.component';\nimport { InvoicesComponent } from './invoices/invoices.component';\nimport { InvoiceFormComponent } from './invoice-form/invoice-form.component';\nimport { HoursControlComponent } from './hours-control/hours-control.component';\n\n@NgModule({\n  declarations: [\n    CustomerComponent,\n    CustomersComponent,\n    CustomerFormComponent,\n    InvoiceComponent,\n    InvoicesComponent,\n    InvoiceFormComponent,\n    HoursControlComponent],\n  exports: [\n    CustomerComponent,\n    CustomersComponent,\n    CustomerFormComponent,\n    InvoicesComponent,\n    InvoiceComponent,\n    InvoiceFormComponent,\n    HoursControlComponent\n  ],\n  imports: [\n    CommonModule,\n    RouterModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatListModule,\n    MatButtonModule,\n    MatIconModule,\n    MatToolbarModule,\n    MatSidenavModule,\n    MatCardModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatSelectModule,\n    MatSlideToggleModule,\n    CovalentLoadingModule,\n    CovalentDialogsModule\n  ]\n})\nexport class InvoiceModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport { TdLoadingService } from '@covalent/core/loading';\nimport { map, switchMap } from 'rxjs/operators';\nimport { Customer } from '../model/customer.model';\nimport { Invoice } from '../model/invoice.model';\nimport { CustomersService } from '../service/customers/customers.service';\nimport { InvoicesService } from '../service/invoices/invoices.service';\n\n@Component({\n  selector: 'app-invoice',\n  templateUrl: './invoice.component.html',\n  styleUrls: ['./invoice.component.css']\n})\nexport class InvoiceComponent implements OnInit {\n  invoice: Invoice;\n  customer: Customer;\n\n  constructor(\n    private loadingService: TdLoadingService,\n    private invoicesService: InvoicesService,\n    private customersService: CustomersService,\n    private route: ActivatedRoute\n  ) { }\n\n  ngOnInit() {\n    this.loadingService.register('invoice');\n    this.route.params.pipe(\n      map((params: Params) => params.invoiceId),\n      switchMap(invoiceId => this.invoicesService.get<Invoice>(invoiceId)),\n      map(invoice => {\n        this.invoice = invoice;\n        return invoice.customerId;\n      }),\n      switchMap(customerId => this.customersService.get<Customer>(customerId))\n    ).subscribe(customer => {\n      this.customer = customer;\n      this.loadingService.resolve('invoice');\n    })\n  }\n}\n","<div  *tdLoading=\"'invoice'\">\n  <mat-list *ngIf=\"invoice && customer\">\n    <h3 matSubheader>Invoice ID: {{invoice.id}}</h3>\n    <mat-list-item>\n      <mat-icon mat-list-icon *ngIf=\"invoice.paid\">done</mat-icon>\n      <mat-icon mat-list-icon *ngIf=\"!invoice.paid\">clear</mat-icon>\n      <h4 mat-line *ngIf=\"invoice.paid\">Payment Received</h4>\n      <h4 mat-line *ngIf=\"!invoice.paid\">Outstanding</h4>\n      <p mat-line>Payment Status</p>\n    </mat-list-item>\n    <mat-list-item>\n      <mat-icon mat-list-icon>done</mat-icon>\n      <h4 mat-line>{{invoice.service}}</h4>\n      <p mat-line>Service</p>\n    </mat-list-item>\n    <mat-list-item>\n      <mat-icon mat-list-icon>date_range</mat-icon>\n      <h4 mat-line>{{invoice.date | date}}</h4>\n      <p mat-line>Date</p>\n    </mat-list-item>\n    <mat-list-item>\n      <mat-icon mat-list-icon>schedule</mat-icon>\n      <h4 mat-line>{{invoice.hours}} hours at {{invoice.rate | currency:'USD':true:'.0'}}</h4>\n      <p mat-line>Hours and Rate</p>\n    </mat-list-item>\n    <mat-list-item>\n      <mat-icon mat-list-icon>attach_money</mat-icon>\n      <h4 mat-line>{{invoice.hours * invoice.rate | currency:'USD':true:'.0'}}</h4>\n      <p mat-line>Total Invoiced</p>\n    </mat-list-item>\n    <mat-list-item>\n      <mat-icon mat-list-icon>perm_identity</mat-icon>\n      <h4 mat-line>{{customer.name}}</h4>\n      <p mat-line>Customer</p>\n    </mat-list-item>\n  </mat-list>\n  <button mat-fab class=\"mat-fab-bottom-right fixed mat-accent mat-fab\" routerLink=\"/invoices/{{invoice?.id}}/edit\"><mat-icon>mode_edit</mat-icon></button>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { Invoice } from '../model/invoice.model';\nimport { InvoicesService } from '../service/invoices/invoices.service';\nimport { TdLoadingService } from '@covalent/core/loading';\n\n@Component({\n  selector: 'app-invoices',\n  templateUrl: './invoices.component.html',\n  styleUrls: ['./invoices.component.css']\n})\nexport class InvoicesComponent implements OnInit {\n  invoices: Invoice[];\n  constructor(\n    private loadingService: TdLoadingService,\n    private invoicesService : InvoicesService) { }\n\n  ngOnInit() {\n    this.loadingService.register('invoices');\n    this.invoicesService.query<Array<Invoice>>({sort: 'created', order: 'desc'})\n      .subscribe(invoices => {\n        this.invoices = invoices;\n        this.loadingService.resolve('invoices');\n      });\n  }\n\n}\n","<div *tdLoading=\"'invoices'\">\n    <mat-list>\n      <h3 matSubheader>Recent Invoices</h3>\n      <mat-list-item *ngFor=\"let invoice of invoices\" routerLink=\"/invoices/{{invoice.id}}\">\n        <mat-icon mat-list-icon>folder</mat-icon>\n        <h4 mat-line>{{invoice.service}}</h4>\n        <p mat-line> {{invoice.date | date}} </p>\n      </mat-list-item>\n    </mat-list>\n    <button mat-fab class=\"mat-fab-bottom-right fixed mat-accent mat-fab\" routerLink=\"/invoices/create\"><mat-icon>add</mat-icon></button>\n</div>","export class Customer {\n    email: string;\n    id: number;\n    name: string;\n    phone: string;\n}\n","export class Invoice {\n    customerId: number;\n    date: string;\n    hours: number;\n    id: number;\n    paid: boolean = false;\n    rate: number;\n    service: string;\n  }\n","import { Injectable } from '@angular/core';\nimport { RestService } from 'src/app/invoice/service/rest/rest.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CustomersService extends RestService {\n  resource: string = '/customers';\n}\n","import { Injectable } from '@angular/core';\nimport { RestService } from '../rest/rest.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class InvoicesService extends RestService{\n  resource: string = '/invoices';\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\ninterface Query {\n  limit?: number;\n  order?: string;\n  sort?: string;\n  embed?: string;\n  expand?: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RestService {\n  base: string = 'http://localhost:3000';\n  resource: string = '/';\n  type: any;\n\n  constructor(private http: HttpClient) { }\n\n  get url() {\n    return this.base + this.resource;\n  }\n\n  query<T>(query?: Query) {\n    let url = this.url;\n    if (query) {\n      url += `?${this.toQueryString(query)}`;\n    }\n\n    return this.http.get<T>(url);\n  }\n\n  get<T>(id: number) {\n    return this.http.get<T>(this.url + '/' + id);\n  }\n\n  create<T>(body: any) {\n    return this.http.post<T>(this.url, body);\n  }\n\n  update<T>(id: number, body: any) {\n    return this.http.put<T>(this.url + '/' + id, body);\n  }\n\n  delete<T>(id: number) {\n    return this.http.delete<T>(this.url + '/' + id);\n  }\n\n  private toQueryString(paramsObject) {\n    return Object\n      .keys(paramsObject)\n      .map(key => `_${encodeURIComponent(key)}=${encodeURIComponent(paramsObject[key])}`)\n      .join('&');\n  }\n}\n","import { AbstractControl, ValidatorFn } from '@angular/forms';\n\nexport function HoursValidator(control: AbstractControl): { [key: string]: any } {\n    return Number.isInteger(control.value * 4) ? null : { hour: true };\n}","import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\n\nlet stocks: Array<string> = [\"AAPL\", \"GOOG\", \"FB\", \"AMZN\", \"TWTR\"];\nlet service: string = \"https://angular2-in-action-api.herokuapp.com\";\n\nexport interface StockInterface {\n  symbol: string;\n  lastTradePriceOnly: number;\n  change: number;\n  changeInPercent: number;\n}\n@Injectable()\nexport class StocksService {\n  constructor(private http: HttpClient) {}\n\n  get() {\n    return stocks.slice();\n  }\n  add(stock) {\n    stocks.push(stock);\n    return this.get();\n  }\n  remove(stock) {\n    stocks.splice(stocks.indexOf(stock), 1);\n    return this.get();\n  }\n  load(symbols) {\n    if (symbols) {\n      return this.http.get<Array<StockInterface>>(\n        service + \"/stocks/snapshot?symbols=\" + symbols.join()\n      );\n    }\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}